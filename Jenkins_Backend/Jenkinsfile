pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '4'))
    }

    environment {
        DOCKER_IMAGE = 'backend_image'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        GITHUB_REPO_URL = 'https://github.com/RazSherf/Stocker---App'
        GITHUB_DEPLOYMENT_REPO = 'https://github.com/RazSherf/Stocker---DevOps'
        AWS_REGION = 'us-east-1'
        ECR_REPO_URI = '471112618713.dkr.ecr.us-east-1.amazonaws.com/backend_repo'
        EC2_HOST = 'ec2-user@18.213.94.237'
        GITHUB_CREDS = credentials('github-credentials')
    }

    stages {
        stage('Checkout App') {
            steps {
                git branch: 'main', 
                    url: "${GITHUB_REPO_URL}",
                    credentialsId: 'github-credentials'
            }
        }

        stage('Detect Changes') {
            steps {
                script {
                    def backendChanged = sh(
                        script: "git diff --name-only HEAD^..HEAD | grep -qE '^backend/'",
                        returnStatus: true
                    ) == 0

                    if (!backendChanged) {
                        currentBuild.result = 'ABORTED'
                        error("No changes detected in the backend directory.")
                    }
                }
            }
        }

        stage('Build and Push Image') {
            steps {
                script {
                    // Clean old images
                    sh "docker rmi -f ${DOCKER_IMAGE}:${DOCKER_TAG} || true"
                    
                    // Build new image
                    echo "Building Docker image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "-f backend/Dockerfile backend")
                    
                    // Push to ECR
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | \
                        docker login --username AWS --password-stdin ${ECR_REPO_URI}
                        
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${ECR_REPO_URI}:${DOCKER_TAG}
                        docker push ${ECR_REPO_URI}:${DOCKER_TAG}
                    """
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                dir('k8s-config') {
                    git branch: 'main',
                        url: "${GITHUB_DEPLOYMENT_REPO}",
                        credentialsId: 'github-credentials'
                    
                    withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh '''
                            echo "Current deployment file content:"
                            cat Kubernetes/deployments/backend-deployment.yaml
                            
                            # Create a temporary file with updates
                            awk -v repo="${ECR_REPO_URI}" -v tag="${DOCKER_TAG}" '
                            /image:/ && !done {
                                print "          image: " repo ":" tag
                                print "          imagePullPolicy: Always"
                                done=1
                                next
                            }
                            /spec:.*containers:/ && !specDone {
                                print "      imagePullSecrets:"
                                print "        - name: ecr-credentials"
                                print $0
                                specDone=1
                                next
                            }
                            !/imagePullPolicy:/ {print}' Kubernetes/deployments/backend-deployment.yaml > Kubernetes/deployments/backend-deployment.yaml.tmp
                            
                            # Show the temporary file content
                            echo "Temporary file content:"
                            cat Kubernetes/deployments/backend-deployment.yaml.tmp
                            
                            # Replace the original file
                            mv Kubernetes/deployments/backend-deployment.yaml.tmp Kubernetes/deployments/backend-deployment.yaml
                            
                            echo "Updated deployment file content:"
                            cat Kubernetes/deployments/backend-deployment.yaml
                            
                            # Configure git
                            git config user.email "jenkins@example.com"
                            git config user.name "Jenkins"
                            
                            # Add and commit changes
                            git add Kubernetes/deployments/backend-deployment.yaml
                            
                            # Commit if there are changes
                            if ! git diff --cached --quiet; then
                                git commit -m "Update backend deployment to version ${DOCKER_TAG} and add ECR credentials"
                                git remote set-url origin "https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/RazSherf/Stocker---DevOps.git"
                                echo "Pushing changes..."
                                git push origin main
                            else
                                echo "No changes to commit"
                            fi
                        '''
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
        environment {
            SSH_KEY = credentials('ec2-ssh-key')
        }
        steps {
            script {
                try {
                    sh """
                        chmod 400 \${SSH_KEY}
                        ssh -o StrictHostKeyChecking=no -i \${SSH_KEY} \${EC2_HOST} '''
                            rm -rf /tmp/k8s-config
                            git clone ${GITHUB_DEPLOYMENT_REPO} /tmp/k8s-config
                            cd /tmp/k8s-config
                            
                            echo "Verifying deployment state..."
                            if ! kubectl get deployment backend &>/dev/null; then
                                echo "Deployment does not exist!"
                                exit 1
                            fi
                            
                            kubectl apply -f /tmp/k8s-config/Kubernetes/deployments/backend-deployment.yaml
                            
                            if ! kubectl rollout status deployment/backend --timeout=300s; then
                                echo "Deployment failed to roll out"
                                kubectl rollout undo deployment/backend
                                exit 1
                            fi
                        '''
                    """
                } catch (Exception e) {
                    sh """
                        chmod 400 \${SSH_KEY}
                        ssh -o StrictHostKeyChecking=no -i \${SSH_KEY} \${EC2_HOST} '''
                            echo "Starting rollback procedure..."
                            kubectl rollout undo deployment/backend
                            kubectl rollout status deployment/backend --timeout=180s
                        '''
                    """
                    error "Deployment failed and rollback initiated: ${e.getMessage()}"
                }
            }
        }
    }
        stage('Cleanup Old Images') {
            environment {
                SSH_KEY = credentials('ec2-ssh-key')
            }
            steps {
                script {
                    try {
                        sh """
                            chmod 400 \${SSH_KEY}
                            ssh -o StrictHostKeyChecking=no -i \${SSH_KEY} \${EC2_HOST} '
                                echo "Cleaning up old Docker images..."
                                OLD_TAGS=\$(docker images ${ECR_REPO_URI} --format "{{.Tag}}" | sort -n | head -n -2)
                                
                                if [ ! -z "\${OLD_TAGS}" ]; then
                                    for tag in \${OLD_TAGS}; do
                                        echo "Removing image: ${ECR_REPO_URI}:\${tag}"
                                        docker rmi ${ECR_REPO_URI}:\${tag} || true
                                    done
                                fi
                            '
                        """
                    } catch (Exception e) {
                        echo "Warning: Image cleanup encountered an issue: ${e.getMessage()}"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully! New version deployed to Kubernetes.'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
        aborted {
            echo 'Pipeline was aborted because no relevant changes were detected.'
        }
        always {
            cleanWs()
        }
    }
}