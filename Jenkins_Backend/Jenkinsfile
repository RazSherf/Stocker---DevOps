pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'new_test'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        GITHUB_REPO_URL = 'https://github.com/RazSherf/Stocker---App'
        AWS_REGION = 'us-east-1'
        ECR_REPO_URI = '471112618713.dkr.ecr.us-east-1.amazonaws.com/project-repo-app'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: "${GITHUB_REPO_URL}"
            }
        }

        stage('Detect Changes') {
            steps {
                script {
                    // Detect changes in the backend folder (use git diff on the last commit)
                    def backendChanged = sh(
                        script: "git diff --name-only HEAD^..HEAD | grep -qE '^backend/'",
                        returnStatus: true
                    ) == 0

                    // If no changes detected in the backend folder, abort the build
                    if (!backendChanged) {
                        currentBuild.result = 'ABORTED'
                        echo "No relevant changes detected in the backend directory. Aborting pipeline."
                        error("No changes detected in the backend directory.")
                    }
                }
            }
        }

        stage('Clean Old Images') {
            steps {
                script {
                    sh "docker rmi -f ${DOCKER_IMAGE}:${DOCKER_TAG} || true"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "-f backend/Dockerfile backend")
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    // Authenticate Docker with ECR
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | \
                        docker login --username AWS --password-stdin ${ECR_REPO_URI}
                    """
                    
                    // Tag and push the Docker image to ECR
                    sh """
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${ECR_REPO_URI}:${DOCKER_TAG}
                        docker push ${ECR_REPO_URI}:${DOCKER_TAG}
                    """
                }
            }
        }

        stage('Run Docker Image') {
            steps {
                script {
                    sh """
                        docker stop test-container || true
                        docker rm test-container || true
                        docker run -d --name test-container -p 5000:5000 ${ECR_REPO_URI}:${DOCKER_TAG}
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully! Docker container is running.'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
        aborted {
            echo 'Pipeline was aborted because no relevant changes were detected.'
        }
    }
}