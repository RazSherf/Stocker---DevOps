pipeline {
    agent any
    options {
        // Retain only the last 4 builds
        buildDiscarder(logRotator(numToKeepStr: '4'))
    }

    environment {
        DOCKER_IMAGE = 'frontend_image'  // Change to an appropriate name for the frontend
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        GITHUB_REPO_URL = 'https://github.com/RazSherf/Stocker---App'  // This is the frontend repo URL
        AWS_REGION = 'us-east-1'
        ECR_REPO_URI = '471112618713.dkr.ecr.us-east-1.amazonaws.com/frontend_repo'
        EC2_HOST = 'ec2-user@18.213.94.237'
        DEPLOYMENT_FILE = '/home/ec2-user/Stocker---DevOps/Kubernetes/deployments/frontend-deployment.yaml'

    }

    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: "${GITHUB_REPO_URL}"
            }
        }

        stage('Detect Changes') {
            steps {
                script {
                    // Detect changes in the frontend folder (use git diff on the last commit)
                    def frontendChanged = sh(
                        script: "git diff --name-only HEAD^..HEAD | grep -qE '^frontend/'",
                        returnStatus: true
                    ) == 0

                    // If no changes detected in the frontend folder, abort the build
                    if (!frontendChanged) {
                        currentBuild.result = 'ABORTED'
                        currentBuild.rawBuild.keepLog(false) // Ensure the build is not retained
                        echo "No relevant changes detected in the frontend directory. Aborting pipeline."
                        error("No changes detected in the frontend directory.")
                    }
                }
            }
        }

        stage('Clean Old Images') {
            steps {
                script {
                    sh "docker rmi -f ${DOCKER_IMAGE}:${DOCKER_TAG} || true"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "-f frontend/Dockerfile frontend")
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    // Authenticate Docker with ECR
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | \
                        docker login --username AWS --password-stdin ${ECR_REPO_URI}
                    """
                    
                    // Tag and push the Docker image to ECR
                    sh """
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${ECR_REPO_URI}:${DOCKER_TAG}
                        docker push ${ECR_REPO_URI}:${DOCKER_TAG}
                    """
                }
            }
        }
         stage('Test SSH Connection and Pull Image') {
            environment {
                SSH_KEY = credentials('ec2-ssh-key')
            }
            steps {
                script {
                    try {
                        sh """
                            chmod 400 \${SSH_KEY}
                            ssh -o StrictHostKeyChecking=no -i \${SSH_KEY} \${EC2_HOST} '
                                export AWS_DEFAULT_REGION=${AWS_REGION}
                                
                                aws ecr get-login-password --region ${AWS_REGION} | \
                                docker login --username AWS --password-stdin ${ECR_REPO_URI}
                                
                                echo "Pulling image: ${ECR_REPO_URI}:${DOCKER_TAG}"
                                docker pull ${ECR_REPO_URI}:${DOCKER_TAG}
                                
                                docker images | grep ${ECR_REPO_URI}
                            '
                        """
                    } catch (Exception e) {
                        error "Failed to pull image on EC2: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Update Kubernetes Deployment') {
            environment {
                SSH_KEY = credentials('ec2-ssh-key')
            }
            steps {
                script {
                    try {
                        sh """
                            chmod 400 \${SSH_KEY}
                            ssh -o StrictHostKeyChecking=no -i \${SSH_KEY} \${EC2_HOST} '
                                echo "Updating deployment file with new image tag: ${DOCKER_TAG}"
                                sed -i "s|${ECR_REPO_URI}:[0-9]*|${ECR_REPO_URI}:${DOCKER_TAG}|g" ${DEPLOYMENT_FILE}
                                
                                echo "Applying updated deployment..."
                                kubectl apply -f ${DEPLOYMENT_FILE}
                                
                                echo "Waiting for rollout to complete..."
                                kubectl rollout status deployment/backend
                                
                                echo "Current deployment status:"
                                kubectl get deployment backend
                            '
                        """
                    } catch (Exception e) {
                        error "Failed to update Kubernetes deployment: ${e.getMessage()}"
                    }
                }
            }
        }
    

        
    }

    post {
        success {
            echo 'Pipeline completed successfully! Docker container is running.'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
        aborted {
            echo 'Pipeline was aborted because no relevant changes were detected.'
        }
    }
}